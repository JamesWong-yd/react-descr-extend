// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`returns a deprecated documented json 1`] = `
Object {
  "deprecated": "yes it is deprecated",
  "description": "component",
  "name": "Component",
  "properties": Array [
    Object {
      "description": "any",
      "format": "any",
      "name": "test",
    },
    Object {
      "description": "array",
      "format": "array",
      "name": "test2",
    },
    Object {
      "description": "arrayOf",
      "format": "[number]",
      "name": "test3",
    },
    Object {
      "description": "bool",
      "format": "boolean",
      "name": "test4",
    },
    Object {
      "description": "custom",
      "format": "XXX-XX-XXXX",
      "name": "test5",
    },
    Object {
      "description": "element",
      "format": "element",
      "name": "test6",
    },
    Object {
      "description": "func",
      "format": "function",
      "name": "test7",
    },
    Object {
      "description": "instanceOf",
      "format": "new FakeComponent(...)",
      "name": "test8",
    },
    Object {
      "description": "node",
      "format": "node",
      "name": "test9",
    },
    Object {
      "description": "number",
      "format": "number",
      "name": "test10",
    },
    Object {
      "description": "object",
      "format": "object",
      "name": "test11",
    },
    Object {
      "description": "objectOf",
      "format": "{ test: number, ... }",
      "name": "test12",
    },
    Object {
      "description": "oneOf",
      "format": "News
Photos",
      "name": "test13",
    },
    Object {
      "description": "oneOfType",
      "format": "number
string",
      "name": "test14",
    },
    Object {
      "description": "symbol",
      "format": "symbol",
      "name": "test15",
    },
    Object {
      "description": "shape",
      "format": "{
  color: string,
  fontSize: number,
  one: 
    string
    number
    new FakeComponent(...)
    custom,
  test: new FakeComponent(...),
  test2: 
    {
      test3: string,
      test4: 
        {
          test5: string,
          test6: number,
          test7: custom,
          test8: [string]
        }
    },
  test9: 
    type1
    type2
    {
      type: 
        type1
        type2,
      count: number
    }
    [
      type1
      type2
      {
        type: 
          type1
          type2,
        count: number
      }
    ]
}",
      "name": "test16",
    },
    Object {
      "description": "testRequired",
      "format": "string",
      "name": "testRequired",
      "required": true,
    },
    Object {
      "defaultProp": "abc",
      "deprecated": "use something else",
      "description": "testRequired",
      "format": "string",
      "name": "testDeprecated",
    },
  ],
  "usage": "test",
}
`;

exports[`returns a deprecated documented markdown 1`] = `
"## ~~Component~~ (yes it is deprecated)
component

## Usage

\`\`\`javascript
test
\`\`\`

## Properties

**test**

any

\`\`\`
any
\`\`\`

**test2**

array

\`\`\`
array
\`\`\`

**test3**

arrayOf

\`\`\`
[number]
\`\`\`

**test4**

bool

\`\`\`
boolean
\`\`\`

**test5**

custom

\`\`\`
XXX-XX-XXXX
\`\`\`

**test6**

element

\`\`\`
element
\`\`\`

**test7**

func

\`\`\`
function
\`\`\`

**test8**

instanceOf

\`\`\`
new FakeComponent(...)
\`\`\`

**test9**

node

\`\`\`
node
\`\`\`

**test10**

number

\`\`\`
number
\`\`\`

**test11**

object

\`\`\`
object
\`\`\`

**test12**

objectOf

\`\`\`
{ test: number, ... }
\`\`\`

**test13**

oneOf

\`\`\`
News
Photos
\`\`\`

**test14**

oneOfType

\`\`\`
number
string
\`\`\`

**test15**

symbol

\`\`\`
symbol
\`\`\`

**test16**

shape

\`\`\`
{
  color: string,
  fontSize: number,
  one: 
    string
    number
    new FakeComponent(...)
    custom,
  test: new FakeComponent(...),
  test2: 
    {
      test3: string,
      test4: 
        {
          test5: string,
          test6: number,
          test7: custom,
          test8: [string]
        }
    },
  test9: 
    type1
    type2
    {
      type: 
        type1
        type2,
      count: number
    }
    [
      type1
      type2
      {
        type: 
          type1
          type2,
        count: number
      }
    ]
}
\`\`\`

**testRequired**

Required. testRequired

\`\`\`
string
\`\`\`

**~~testDeprecated~~** (use something else)

testRequired Defaults to \`abc\`.

\`\`\`
string
\`\`\`
  "
`;

exports[`returns a documented json 1`] = `
Object {
  "description": "component",
  "name": "Component",
  "properties": Array [
    Object {
      "description": "any",
      "format": "any",
      "name": "test",
    },
    Object {
      "description": "array",
      "format": "array",
      "name": "test2",
    },
    Object {
      "description": "arrayOf",
      "format": "[number]",
      "name": "test3",
    },
    Object {
      "description": "bool",
      "format": "boolean",
      "name": "test4",
    },
    Object {
      "description": "custom",
      "format": "XXX-XX-XXXX",
      "name": "test5",
    },
    Object {
      "description": "element",
      "format": "element",
      "name": "test6",
    },
    Object {
      "description": "func",
      "format": "function",
      "name": "test7",
    },
    Object {
      "description": "instanceOf",
      "format": "new FakeComponent(...)",
      "name": "test8",
    },
    Object {
      "description": "node",
      "format": "node",
      "name": "test9",
    },
    Object {
      "description": "number",
      "format": "number",
      "name": "test10",
    },
    Object {
      "description": "object",
      "format": "object",
      "name": "test11",
    },
    Object {
      "description": "objectOf",
      "format": "{ test: number, ... }",
      "name": "test12",
    },
    Object {
      "description": "oneOf",
      "format": "News
Photos",
      "name": "test13",
    },
    Object {
      "description": "oneOfType",
      "format": "number
string",
      "name": "test14",
    },
    Object {
      "description": "symbol",
      "format": "symbol",
      "name": "test15",
    },
    Object {
      "description": "shape",
      "format": "{
  color: string,
  fontSize: number,
  one: 
    string
    number
    new FakeComponent(...)
    custom,
  test: new FakeComponent(...),
  test2: 
    {
      test3: string,
      test4: 
        {
          test5: string,
          test6: number,
          test7: custom,
          test8: [string]
        }
    },
  test9: 
    type1
    type2
    {
      type: 
        type1
        type2,
      count: number
    }
    [
      type1
      type2
      {
        type: 
          type1
          type2,
        count: number
      }
    ]
}",
      "name": "test16",
    },
    Object {
      "description": "testRequired",
      "format": "string",
      "name": "testRequired",
      "required": true,
    },
    Object {
      "defaultProp": "abc",
      "deprecated": "use something else",
      "description": "testRequired",
      "format": "string",
      "name": "testDeprecated",
    },
  ],
  "usage": "test",
}
`;

exports[`returns a documented markdown 1`] = `
"## Component
component

## Usage

\`\`\`javascript
test
\`\`\`

## Properties

**test**

any

\`\`\`
any
\`\`\`

**test2**

array

\`\`\`
array
\`\`\`

**test3**

arrayOf

\`\`\`
[number]
\`\`\`

**test4**

bool

\`\`\`
boolean
\`\`\`

**test5**

custom

\`\`\`
XXX-XX-XXXX
\`\`\`

**test6**

element

\`\`\`
element
\`\`\`

**test7**

func

\`\`\`
function
\`\`\`

**test8**

instanceOf

\`\`\`
new FakeComponent(...)
\`\`\`

**test9**

node

\`\`\`
node
\`\`\`

**test10**

number

\`\`\`
number
\`\`\`

**test11**

object

\`\`\`
object
\`\`\`

**test12**

objectOf

\`\`\`
{ test: number, ... }
\`\`\`

**test13**

oneOf

\`\`\`
News
Photos
\`\`\`

**test14**

oneOfType

\`\`\`
number
string
\`\`\`

**test15**

symbol

\`\`\`
symbol
\`\`\`

**test16**

shape

\`\`\`
{
  color: string,
  fontSize: number,
  one: 
    string
    number
    new FakeComponent(...)
    custom,
  test: new FakeComponent(...),
  test2: 
    {
      test3: string,
      test4: 
        {
          test5: string,
          test6: number,
          test7: custom,
          test8: [string]
        }
    },
  test9: 
    type1
    type2
    {
      type: 
        type1
        type2,
      count: number
    }
    [
      type1
      type2
      {
        type: 
          type1
          type2,
        count: number
      }
    ]
}
\`\`\`

**testRequired**

Required. testRequired

\`\`\`
string
\`\`\`

**~~testDeprecated~~** (use something else)

testRequired Defaults to \`abc\`.

\`\`\`
string
\`\`\`
  "
`;
